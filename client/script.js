const input = document.querySelector('#input');
const addBtn = document.querySelector('#addBtn');
const todoListContainer = document.querySelector('#todo-list-container');
const total = document.querySelector('#total');

let activeTasksNumber = 0; // Number of elements in my todoList
let todosArr = [];

let todoList = new TodoList();

//----------- FIREBASE ----------//
//----- Calculating the number of active tasks -----//
function todosArrLengthUpdate(todos) {
  activeTasksNumber = todos.filterByStatus(ACTIVE).length;
  total.textContent = activeTasksNumber + ' tasks left';
}

// The reference to the ul element with the id todo-list-container
const ul = document.querySelector('#todo-list-container');

// The reference to the div element with the id myDIV where my input and button tags are
const form = document.querySelector('#myDIV');

// Creating an li element and render todos
// Creating an HTML elements, put some data to those and render them to the DOM
function renderTodos(doc) {
  // Creating a new li element inside ul element with the id todo-list-container
  let li = document.createElement('li');

  li.className = 'li'; // Setting the li class to the li element

  // Creating a new span elements inside li element
  let name = document.createElement('span');

  // Setting an attribute to each li element in order to use it in future
  li.setAttribute('id', doc.id); // id is the autogenerated id from firebase

  // Setting the text content for each span element
  name.textContent = doc.data().name; // name is a property name from Firebase (for example Learn HTML)

  li.appendChild(name);

  if (doc.data().isDone) {
    li.classList.add('li-completed');
  }

  //----- Creating a Del button at the end of the task -----//
  let delBtn = document.createElement('button');
  delBtn.className = 'btn-delete-todo'; // Setting class to the button
  delBtn.textContent = 'Del'; // Adding text Del to the button

  li.appendChild(delBtn); // Adding Del button at the end of the task
  ul.appendChild(li); // Appending a li element to the ul element

  //----- Deleting a task -----//
  if (delBtn) {
    delBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      if (confirm('Are you sure?')) {
        let id = e.target.parentElement.id;
        db.collection('MyTodoList').doc(id).delete();
      }
    });
  }

  // Toggle class completed
  li.addEventListener('click', (e) => {
    let todo = todoList.getElementById(e.target.id);

    db.collection('MyTodoList').doc(todo.id).update({
      isDone: !todo.isDone,
    });
  });
}

//----- Add button -----//
addBtn.addEventListener('click', (e) => {
  db.collection('MyTodoList').add({
    name: input.value, // getting the value from the input field
    isDone: false,
  });

  input.value = ''; // Clear input field
});

//----- REAL TIME DATABASE CHANGES -----//
// Real-time listener (reacts on every single change in Firebase)
db.collection('MyTodoList').onSnapshot((snapshot) => {
  let changes = snapshot.docChanges();

  // Adding a task
  changes.forEach((change) => {
    if (change.type === 'added') {
      let data = change.doc.data(); // Saving added changes to data

      // Creating a new Todo with data from Firebase
      let todo = new Todo(data.name, data.isDone, change.doc.id);
      todoList.addElement(todo);

      return renderTodos(change.doc);
    }

    // Deleting the certain task
    if (change.type === 'removed') {
      todoList.removeElement(change.doc.id); // Removing from data

      // // There was a mistake "can not read a property of null"
      // // If was added
      // if (document.getElementById(change.doc.id) != null) {
      document.getElementById(change.doc.id).remove(); // Removing from html
      // }

      return;

      // Updating data
    }
    if (change.type === 'modified') {
      let id = change.doc.id;
      let todo = todoList.getElementById(id);
      todo.toggle(change.doc.data().isDone);

      let li = document.getElementById(id);
      li.classList.toggle('li-completed');

      return;
    }
  });

  todosArrLengthUpdate(todoList);
});

//----------------------------------------//
function toggleTodosVisibility(visibleTodosIds) {
  todoList.getTodos().forEach((todo) => {
    let el = document.getElementById(todo.id);
    if (!visibleTodosIds.includes(todo.id)) {
      el.classList.add('hidden');
    } else {
      el.classList.remove('hidden');
    }
  });
}

//-- Active button --//
document.querySelector('.activeBtn').addEventListener('click', (e) => {
  let visibleTodosIds = todoList.filterByStatus(ACTIVE).map((item) => item.id);
  toggleTodosVisibility(visibleTodosIds);
});

//-- Completed button --//
document.querySelector('.completedBtn').addEventListener('click', (e) => {
  let visibleTodosIds = todoList
    .filterByStatus(COMPLETED)
    .map((item) => item.id);
  toggleTodosVisibility(visibleTodosIds);
});

//-- All button --//
document.querySelector('.AllBtn').addEventListener('click', (e) => {
  let visibleTodosIds = todoList.filterByStatus(ALL).map((item) => item.id);
  toggleTodosVisibility(visibleTodosIds);
});

//-- Clear All button --//
// Use a querySelector with .clearAllBtn class to make sure that we work with the Clear All button
document.querySelector('.clearAllBtn').addEventListener('click', (e) => {
  // Confirmation window for deleting todos
  if (confirm('Are you sure?')) {
    let idsToDelete = todoList.getTodos().map((todo) => todo.id); // Getting ids from todoList
    console.log(idsToDelete);

    // - send request to firebase to clear todo collection
    // - if the request is success then todoList.clear();

    for (let i = 0; i < idsToDelete.length; i++) {
      console.log(idsToDelete[i]);
      db.collection('MyTodoList').doc(idsToDelete[i]).delete();
    }
  }
});
